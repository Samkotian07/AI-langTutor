import * as e from "react";
import { c as oe, w as ue, r as le, m as de, a as K } from "./room-DnkSWp5z.mjs";
import { C as G, S as me, a as fe, M as B, b as he, T as V, c as pe, d as ge, D as J, e as ve, f as H, L as Q, G as Ee, P as z, F as Se, g as ke, h as be, R as Ce, i as we, j as Ie, k as ye, B as Me } from "./components-C8upqnw3.mjs";
import { w as Ne, x as Pe, y as x, z as Te, A as X, t as Y, B as De, C as Le } from "./hooks-ciugK_LK.mjs";
import { j as Z, am as Ae, an as Re, l as T, ao as Ve, a as Oe, ap as $e, aq as Ue, a1 as q, ar as _e, as as Fe } from "./contexts-Dk2rs0II.mjs";
import { Mutex as Be, createLocalTracks as qe, Track as w, facingModeFromLocalTrack as xe, createLocalVideoTrack as We, VideoPresets as je, createLocalAudioTrack as ze, RoomEvent as Ke } from "livekit-client";
function ee({
  messageFormatter: a,
  messageDecoder: u,
  messageEncoder: r,
  channelTopic: s,
  ...E
}) {
  const p = e.useRef(null), f = e.useRef(null), o = e.useMemo(() => ({ messageDecoder: u, messageEncoder: r, channelTopic: s }), [u, r, s]), { send: d, chatMessages: g, isSending: t } = Ne(o), m = Z(), n = e.useRef(0);
  async function S(c) {
    c.preventDefault(), p.current && p.current.value.trim() !== "" && d && (await d(p.current.value), p.current.value = "", p.current.focus());
  }
  return e.useEffect(() => {
    var c;
    f && ((c = f.current) == null || c.scrollTo({ top: f.current.scrollHeight }));
  }, [f, g]), e.useEffect(() => {
    var i, v, h, k, I;
    if (!m || g.length === 0)
      return;
    if ((i = m.widget.state) != null && i.showChat && g.length > 0 && n.current !== ((v = g[g.length - 1]) == null ? void 0 : v.timestamp)) {
      n.current = (h = g[g.length - 1]) == null ? void 0 : h.timestamp;
      return;
    }
    const c = g.filter(
      (P) => !n.current || P.timestamp > n.current
    ).length, { widget: l } = m;
    c > 0 && ((k = l.state) == null ? void 0 : k.unreadMessages) !== c && ((I = l.dispatch) == null || I.call(l, { msg: "unread_msg", count: c }));
  }, [g, m == null ? void 0 : m.widget]), /* @__PURE__ */ e.createElement("div", { ...E, className: "lk-chat" }, /* @__PURE__ */ e.createElement("div", { className: "lk-chat-header" }, "Messages", m && /* @__PURE__ */ e.createElement(G, { className: "lk-close-button" }, /* @__PURE__ */ e.createElement(me, null))), /* @__PURE__ */ e.createElement("ul", { className: "lk-list lk-chat-messages", ref: f }, E.children ? g.map(
    (c, l) => oe(E.children, {
      entry: c,
      key: c.id ?? l,
      messageFormatter: a
    })
  ) : g.map((c, l, i) => {
    const v = l >= 1 && i[l - 1].from === c.from, h = l >= 1 && c.timestamp - i[l - 1].timestamp < 6e4;
    return /* @__PURE__ */ e.createElement(
      fe,
      {
        key: c.id ?? l,
        hideName: v,
        hideTimestamp: v === !1 ? !1 : h,
        entry: c,
        messageFormatter: a
      }
    );
  })), /* @__PURE__ */ e.createElement("form", { className: "lk-chat-form", onSubmit: S }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control lk-chat-form-input",
      disabled: t,
      ref: p,
      type: "text",
      placeholder: "Enter a message...",
      onInput: (c) => c.stopPropagation(),
      onKeyDown: (c) => c.stopPropagation(),
      onKeyUp: (c) => c.stopPropagation()
    }
  ), /* @__PURE__ */ e.createElement("button", { type: "submit", className: "lk-button lk-chat-form-button", disabled: t }, "Send")));
}
function $({
  kind: a,
  initialSelection: u,
  onActiveDeviceChange: r,
  tracks: s,
  requestPermissions: E = !1,
  ...p
}) {
  const [f, o] = e.useState(!1), [d, g] = e.useState([]), [t, m] = e.useState(!0), [n, S] = e.useState(E), c = (h, k) => {
    T.debug("handle device change"), o(!1), r == null || r(h, k);
  }, l = e.useRef(null), i = e.useRef(null);
  e.useLayoutEffect(() => {
    f && S(!0);
  }, [f]), e.useLayoutEffect(() => {
    l.current && i.current && (d || t) && Ae(l.current, i.current).then(({ x: h, y: k }) => {
      i.current && Object.assign(i.current.style, { left: `${h}px`, top: `${k}px` });
    }), m(!1);
  }, [l, i, d, t]);
  const v = e.useCallback(
    (h) => {
      i.current && h.target !== l.current && f && Re(i.current, h) && o(!1);
    },
    [f, i, l]
  );
  return e.useEffect(() => (document.addEventListener("click", v), window.addEventListener("resize", () => m(!0)), () => {
    document.removeEventListener("click", v), window.removeEventListener("resize", () => m(!0));
  }), [v, m]), /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-button-menu",
      "aria-pressed": f,
      ...p,
      onClick: () => o(!f),
      ref: l
    },
    p.children
  ), !p.disabled && /* @__PURE__ */ e.createElement(
    "div",
    {
      className: "lk-device-menu",
      ref: i,
      style: { visibility: f ? "visible" : "hidden" }
    },
    a ? /* @__PURE__ */ e.createElement(
      B,
      {
        initialSelection: u,
        onActiveDeviceChange: (h) => c(a, h),
        onDeviceListChange: g,
        kind: a,
        track: s == null ? void 0 : s[a],
        requestPermissions: n
      }
    ) : /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Audio inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "audioinput",
        onActiveDeviceChange: (h) => c("audioinput", h),
        onDeviceListChange: g,
        track: s == null ? void 0 : s.audioinput,
        requestPermissions: n
      }
    ), /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Video inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "videoinput",
        onActiveDeviceChange: (h) => c("videoinput", h),
        onDeviceListChange: g,
        track: s == null ? void 0 : s.videoinput,
        requestPermissions: n
      }
    ))
  ));
}
function W() {
  e.useEffect(() => {
    ue();
  }, []);
}
function Ge(a, u) {
  const [r, s] = e.useState(), E = e.useMemo(() => new Be(), []);
  return e.useEffect(() => {
    let p = !1, f = [];
    return E.lock().then(async (o) => {
      try {
        (a.audio || a.video) && (f = await qe(a), p ? f.forEach((d) => d.stop()) : s(f));
      } catch (d) {
        u && d instanceof Error ? u(d) : T.error(d);
      } finally {
        o();
      }
    }), () => {
      p = !0, f.forEach((o) => {
        o.stop();
      });
    };
  }, [JSON.stringify(a, le), u, E]), r;
}
function tt(a, u, r) {
  const [s, E] = e.useState(null), [p, f] = e.useState(!1), o = Pe({ kind: r }), [d, g] = e.useState(
    void 0
  ), [t, m] = e.useState(), [n, S] = e.useState(u);
  e.useEffect(() => {
    S(u);
  }, [u]);
  const c = async (v, h) => {
    try {
      const k = h === "videoinput" ? await We({
        deviceId: v,
        resolution: je.h720.resolution
      }) : await ze({ deviceId: v }), I = await k.getDeviceId(!1);
      I && v !== I && (i.current = I, S(I)), m(k);
    } catch (k) {
      k instanceof Error && E(k);
    }
  }, l = async (v, h) => {
    await v.setDeviceId(h), i.current = h;
  }, i = e.useRef(n);
  return e.useEffect(() => {
    a && !t && !s && !p && (T.debug("creating track", r), f(!0), c(n, r).finally(() => {
      f(!1);
    }));
  }, [a, t, s, p]), e.useEffect(() => {
    t && (a ? d != null && d.deviceId && i.current !== (d == null ? void 0 : d.deviceId) ? (T.debug(`switching ${r} device from`, i.current, d.deviceId), l(t, d.deviceId)) : (T.debug(`unmuting local ${r} track`), t.unmute()) : (T.debug(`muting ${r} track`), t.mute().then(() => T.debug(t.mediaStreamTrack))));
  }, [t, d, a, r]), e.useEffect(() => () => {
    t && (T.debug(`stopping local ${r} track`), t.stop(), t.mute());
  }, []), e.useEffect(() => {
    g(o == null ? void 0 : o.find((v) => v.deviceId === n));
  }, [n, o]), {
    selectedDevice: d,
    localTrack: t,
    deviceError: s
  };
}
function at({
  defaults: a = {},
  onValidate: u,
  onSubmit: r,
  onError: s,
  debug: E,
  joinLabel: p = "Join Room",
  micLabel: f = "Microphone",
  camLabel: o = "Camera",
  userLabel: d = "Username",
  persistUserChoices: g = !0,
  videoProcessor: t,
  ...m
}) {
  const [n, S] = e.useState(Ve), c = {
    ...a.audioDeviceId !== void 0 && { audioDeviceId: a.audioDeviceId },
    ...a.videoDeviceId !== void 0 && { videoDeviceId: a.videoDeviceId },
    ...a.audioEnabled !== void 0 && { audioEnabled: a.audioEnabled },
    ...a.videoEnabled !== void 0 && { videoEnabled: a.videoEnabled },
    ...a.username !== void 0 && { username: a.username }
  }, {
    userChoices: l,
    saveAudioInputDeviceId: i,
    saveAudioInputEnabled: v,
    saveVideoInputDeviceId: h,
    saveVideoInputEnabled: k,
    saveUsername: I
  } = x({
    defaults: c,
    preventSave: !g,
    preventLoad: !g
  }), [P, D] = e.useState(l.audioEnabled), [M, R] = e.useState(l.videoEnabled), [L, C] = e.useState(
    l.audioDeviceId
  ), [y, ae] = e.useState(
    l.videoDeviceId
  ), [O, ne] = e.useState(l.username);
  e.useEffect(() => {
    v(P);
  }, [P, v]), e.useEffect(() => {
    k(M);
  }, [M, k]), e.useEffect(() => {
    i(L);
  }, [L, i]), e.useEffect(() => {
    h(y);
  }, [y, h]), e.useEffect(() => {
    I(O);
  }, [O, I]);
  const A = Ge(
    {
      audio: P ? { deviceId: l.audioDeviceId } : !1,
      video: M ? { deviceId: l.videoDeviceId, processor: t } : !1
    },
    s
  ), U = e.useRef(null), N = e.useMemo(
    () => A == null ? void 0 : A.filter((b) => b.kind === w.Kind.Video)[0],
    [A]
  ), se = e.useMemo(() => {
    if (N) {
      const { facingMode: b } = xe(N);
      return b;
    } else
      return "undefined";
  }, [N]), j = e.useMemo(
    () => A == null ? void 0 : A.filter((b) => b.kind === w.Kind.Audio)[0],
    [A]
  );
  e.useEffect(() => (U.current && N && (N.unmute(), N.attach(U.current)), () => {
    N == null || N.detach();
  }), [N]);
  const [ce, ie] = e.useState(), _ = e.useCallback(
    (b) => typeof u == "function" ? u(b) : b.username !== "",
    [u]
  );
  e.useEffect(() => {
    const b = {
      username: O,
      videoEnabled: M,
      videoDeviceId: y,
      audioEnabled: P,
      audioDeviceId: L
    };
    S(b), ie(_(b));
  }, [O, M, _, P, L, y]);
  function re(b) {
    b.preventDefault(), _(n) ? typeof r == "function" && r(n) : T.warn("Validation failed with: ", n);
  }
  return W(), /* @__PURE__ */ e.createElement("div", { className: "lk-prejoin", ...m }, /* @__PURE__ */ e.createElement("div", { className: "lk-video-container" }, N && /* @__PURE__ */ e.createElement("video", { ref: U, width: "1280", height: "720", "data-lk-facing-mode": se }), (!N || !M) && /* @__PURE__ */ e.createElement("div", { className: "lk-camera-off-note" }, /* @__PURE__ */ e.createElement(he, null))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-container" }, /* @__PURE__ */ e.createElement("div", { className: "lk-button-group audio" }, /* @__PURE__ */ e.createElement(
    V,
    {
      initialState: P,
      source: w.Source.Microphone,
      onChange: (b) => D(b)
    },
    f
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    $,
    {
      initialSelection: L,
      kind: "audioinput",
      disabled: !j,
      tracks: { audioinput: j },
      onActiveDeviceChange: (b, F) => C(F)
    }
  ))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group video" }, /* @__PURE__ */ e.createElement(
    V,
    {
      initialState: M,
      source: w.Source.Camera,
      onChange: (b) => R(b)
    },
    o
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    $,
    {
      initialSelection: y,
      kind: "videoinput",
      disabled: !N,
      tracks: { videoinput: N },
      onActiveDeviceChange: (b, F) => ae(F)
    }
  )))), /* @__PURE__ */ e.createElement("form", { className: "lk-username-container" }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control",
      id: "username",
      name: "username",
      type: "text",
      defaultValue: O,
      placeholder: d,
      onChange: (b) => ne(b.target.value),
      autoComplete: "off"
    }
  ), /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-join-button",
      type: "submit",
      onClick: re,
      disabled: !ce
    },
    p
  )), E && /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("strong", null, "User Choices:"), /* @__PURE__ */ e.createElement("ul", { className: "lk-list", style: { overflow: "hidden", maxWidth: "15rem" } }, /* @__PURE__ */ e.createElement("li", null, "Username: ", `${n.username}`), /* @__PURE__ */ e.createElement("li", null, "Video Enabled: ", `${n.videoEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Audio Enabled: ", `${n.audioEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Video Device: ", `${n.videoDeviceId}`), /* @__PURE__ */ e.createElement("li", null, "Audio Device: ", `${n.audioDeviceId}`))));
}
function Je({ props: a }) {
  const { dispatch: u, state: r } = Oe().widget, s = "lk-button lk-settings-toggle";
  return { mergedProps: e.useMemo(() => de(a, {
    className: s,
    onClick: () => {
      u && u({ msg: "toggle_settings" });
    },
    "aria-pressed": r != null && r.showSettings ? "true" : "false"
  }), [a, s, u, r]) };
}
const He = /* @__PURE__ */ e.forwardRef(
  function(u, r) {
    const { mergedProps: s } = Je({ props: u });
    return /* @__PURE__ */ e.createElement("button", { ref: r, ...s }, u.children);
  }
);
function te({
  variation: a,
  controls: u,
  saveUserChoices: r = !0,
  onDeviceError: s,
  ...E
}) {
  var L;
  const [p, f] = e.useState(!1), o = Z();
  e.useEffect(() => {
    var C, y;
    ((C = o == null ? void 0 : o.widget.state) == null ? void 0 : C.showChat) !== void 0 && f((y = o == null ? void 0 : o.widget.state) == null ? void 0 : y.showChat);
  }, [(L = o == null ? void 0 : o.widget.state) == null ? void 0 : L.showChat]);
  const g = Te(`(max-width: ${p ? 1e3 : 760}px)`) ? "minimal" : "verbose";
  a ?? (a = g);
  const t = { leave: !0, ...u }, m = X();
  m ? (t.camera ?? (t.camera = m.canPublish), t.microphone ?? (t.microphone = m.canPublish), t.screenShare ?? (t.screenShare = m.canPublish), t.chat ?? (t.chat = m.canPublishData && (u == null ? void 0 : u.chat))) : (t.camera = !1, t.chat = !1, t.microphone = !1, t.screenShare = !1);
  const n = e.useMemo(
    () => a === "minimal" || a === "verbose",
    [a]
  ), S = e.useMemo(
    () => a === "textOnly" || a === "verbose",
    [a]
  ), c = $e(), [l, i] = e.useState(!1), v = e.useCallback(
    (C) => {
      i(C);
    },
    [i]
  ), h = K({ className: "lk-control-bar" }, E), {
    saveAudioInputEnabled: k,
    saveVideoInputEnabled: I,
    saveAudioInputDeviceId: P,
    saveVideoInputDeviceId: D
  } = x({ preventSave: !r }), M = e.useCallback(
    (C, y) => y ? k(C) : null,
    [k]
  ), R = e.useCallback(
    (C, y) => y ? I(C) : null,
    [I]
  );
  return /* @__PURE__ */ e.createElement("div", { ...h }, t.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    V,
    {
      source: w.Source.Microphone,
      showIcon: n,
      onChange: M,
      onDeviceError: (C) => s == null ? void 0 : s({ source: w.Source.Microphone, error: C })
    },
    S && "Microphone"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    $,
    {
      kind: "audioinput",
      onActiveDeviceChange: (C, y) => P(y ?? "default")
    }
  ))), t.camera && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    V,
    {
      source: w.Source.Camera,
      showIcon: n,
      onChange: R,
      onDeviceError: (C) => s == null ? void 0 : s({ source: w.Source.Camera, error: C })
    },
    S && "Camera"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    $,
    {
      kind: "videoinput",
      onActiveDeviceChange: (C, y) => D(y ?? "default")
    }
  ))), t.screenShare && c && /* @__PURE__ */ e.createElement(
    V,
    {
      source: w.Source.ScreenShare,
      captureOptions: { audio: !0, selfBrowserSurface: "include" },
      showIcon: n,
      onChange: v,
      onDeviceError: (C) => s == null ? void 0 : s({ source: w.Source.ScreenShare, error: C })
    },
    S && (l ? "Stop screen share" : "Share screen")
  ), t.chat && /* @__PURE__ */ e.createElement(G, null, n && /* @__PURE__ */ e.createElement(pe, null), S && "Chat"), t.settings && /* @__PURE__ */ e.createElement(He, null, n && /* @__PURE__ */ e.createElement(ge, null), S && "Settings"), t.leave && /* @__PURE__ */ e.createElement(J, null, n && /* @__PURE__ */ e.createElement(ve, null), S && "Leave"), /* @__PURE__ */ e.createElement(H, null));
}
function nt({
  chatMessageFormatter: a,
  chatMessageDecoder: u,
  chatMessageEncoder: r,
  SettingsComponent: s,
  ...E
}) {
  var c, l;
  const [p, f] = e.useState({
    showChat: !1,
    unreadMessages: 0,
    showSettings: !1
  }), o = e.useRef(null), d = Y(
    [
      { source: w.Source.Camera, withPlaceholder: !0 },
      { source: w.Source.ScreenShare, withPlaceholder: !1 }
    ],
    { updateOnlyOn: [Ke.ActiveSpeakersChanged], onlySubscribed: !1 }
  ), g = (i) => {
    T.debug("updating widget state", i), f(i);
  }, t = Ue(), m = d.filter(q).filter((i) => i.publication.source === w.Source.ScreenShare), n = (c = De(t)) == null ? void 0 : c[0], S = d.filter((i) => !_e(i, n));
  return e.useEffect(() => {
    var i, v, h, k, I, P;
    if (m.some((D) => D.publication.isSubscribed) && o.current === null ? (T.debug("Auto set screen share focus:", { newScreenShareTrack: m[0] }), (v = (i = t.pin).dispatch) == null || v.call(i, { msg: "set_pin", trackReference: m[0] }), o.current = m[0]) : o.current && !m.some(
      (D) => {
        var M, R;
        return D.publication.trackSid === ((R = (M = o.current) == null ? void 0 : M.publication) == null ? void 0 : R.trackSid);
      }
    ) && (T.debug("Auto clearing screen share focus."), (k = (h = t.pin).dispatch) == null || k.call(h, { msg: "clear_pin" }), o.current = null), n && !q(n)) {
      const D = d.find(
        (M) => M.participant.identity === n.participant.identity && M.source === n.source
      );
      D !== n && q(D) && ((P = (I = t.pin).dispatch) == null || P.call(I, { msg: "set_pin", trackReference: D }));
    }
  }, [
    m.map((i) => `${i.publication.trackSid}_${i.publication.isSubscribed}`).join(),
    (l = n == null ? void 0 : n.publication) == null ? void 0 : l.trackSid,
    d
  ]), W(), /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference", ...E }, Fe() && /* @__PURE__ */ e.createElement(
    Q,
    {
      value: t,
      onWidgetChange: g
    },
    /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference-inner" }, n ? /* @__PURE__ */ e.createElement("div", { className: "lk-focus-layout-wrapper" }, /* @__PURE__ */ e.createElement(Se, null, /* @__PURE__ */ e.createElement(ke, { tracks: S }, /* @__PURE__ */ e.createElement(z, null)), n && /* @__PURE__ */ e.createElement(be, { trackRef: n }))) : /* @__PURE__ */ e.createElement("div", { className: "lk-grid-layout-wrapper" }, /* @__PURE__ */ e.createElement(Ee, { tracks: d }, /* @__PURE__ */ e.createElement(z, null))), /* @__PURE__ */ e.createElement(te, { controls: { chat: !0, settings: !!s } })),
    /* @__PURE__ */ e.createElement(
      ee,
      {
        style: { display: p.showChat ? "grid" : "none" },
        messageFormatter: a,
        messageEncoder: r,
        messageDecoder: u
      }
    ),
    s && /* @__PURE__ */ e.createElement(
      "div",
      {
        className: "lk-settings-menu-modal",
        style: { display: p.showSettings ? "block" : "none" }
      },
      /* @__PURE__ */ e.createElement(s, null)
    )
  ), /* @__PURE__ */ e.createElement(Ce, null), /* @__PURE__ */ e.createElement(we, null));
}
function st({ ...a }) {
  const [u, r] = e.useState({
    showChat: !1,
    unreadMessages: 0
  }), s = Y([w.Source.Microphone]);
  return W(), /* @__PURE__ */ e.createElement(Q, { onWidgetChange: r }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference", ...a }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference-stage" }, /* @__PURE__ */ e.createElement(Ie, { tracks: s }, /* @__PURE__ */ e.createElement(ye, null))), /* @__PURE__ */ e.createElement(
    te,
    {
      controls: { microphone: !0, screenShare: !1, camera: !1, chat: !0 }
    }
  ), u.showChat && /* @__PURE__ */ e.createElement(ee, null)));
}
function ct({
  controls: a,
  saveUserChoices: u = !0,
  onDeviceError: r,
  ...s
}) {
  const E = { leave: !0, microphone: !0, ...a }, p = X(), { microphoneTrack: f, localParticipant: o } = Le(), d = e.useMemo(() => ({
    participant: o,
    source: w.Source.Microphone,
    publication: f
  }), [o, f]);
  p ? E.microphone ?? (E.microphone = p.canPublish) : E.microphone = !1;
  const g = K({ className: "lk-agent-control-bar" }, s), { saveAudioInputEnabled: t, saveAudioInputDeviceId: m } = x({
    preventSave: !u
  }), n = e.useCallback(
    (S, c) => {
      c && t(S);
    },
    [t]
  );
  return /* @__PURE__ */ e.createElement("div", { ...g }, E.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    V,
    {
      source: w.Source.Microphone,
      showIcon: !0,
      onChange: n,
      onDeviceError: (S) => r == null ? void 0 : r({ source: w.Source.Microphone, error: S })
    },
    /* @__PURE__ */ e.createElement(Me, { trackRef: d, barCount: 7, options: { minHeight: 5 } })
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    $,
    {
      kind: "audioinput",
      onActiveDeviceChange: (S, c) => m(c ?? "default")
    }
  ))), E.leave && /* @__PURE__ */ e.createElement(J, null, "Disconnect"), /* @__PURE__ */ e.createElement(H, null));
}
export {
  st as AudioConference,
  ee as Chat,
  te as ControlBar,
  $ as MediaDeviceMenu,
  at as PreJoin,
  nt as VideoConference,
  ct as VoiceAssistantControlBar,
  tt as usePreviewDevice,
  Ge as usePreviewTracks
};
//# sourceMappingURL=prefabs.mjs.map
